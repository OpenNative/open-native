def safeExtGetOpenNative(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}
ext {
   reactNativeAndroidRoot = new File(new File(["node", "--print", "require.resolve('@open-native/core/package.json')"].execute(null, rootDir).text.trim()).parentFile, "/react-android/react")
   reactNativeProjects = []
   buildToolsVersion = project.hasProperty("buildToolsVersion") ? buildToolsVersion : NS_DEFAULT_BUILD_TOOLS_VERSION as String
   minSdkVersion = NS_DEFAULT_MIN_SDK_VERSION as int
   compileSdkVersion = project.hasProperty("compileSdk") ? compileSdk : NS_DEFAULT_COMPILE_SDK_VERSION as int
   targetSdkVersion = project.hasProperty("compileSdk") ? compileSdk : NS_DEFAULT_COMPILE_SDK_VERSION as int
   androidXCoreVersion = safeExtGetOpenNative("ns_default_androidx_core_version", "1.8.0") 
   androidXCompatVersion = safeExtGetOpenNative("ns_default_androidx_appcompat_version",  "1.5.1")
}

allprojects {
  
  // Nativescript by default runs this hook for all plugin builds,
  // but we want to run it only when the main app builds.
  if (!rootProject.projectDir.absolutePath.contains("tempPlugin")) {
    // We are replacing com.facebook.react:react-native with our local :react library in all linked libraries.
    // We could do this inside the module itself but we want the module to work in both
    // react-native & nativescript
    configurations {
      all {
        resolutionStrategy {
          dependencySubstitution {
            substitute module("com.facebook.react:react-native") using project(":react") because "we will replace this with our local react"
          }
        }
      }
    }
  }
}